{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A specialized `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Form.Field`), ` component that handles array fields.\nSpecifically it handles errors correctly when items are added, removed, or\nreordered.`));\n  }\n\n}"}},"metadata":{"displayName":"Field","doclets":{},"composes":null,"description":{"childMarkdownRemark":{"html":"<p>The Field Component renders a form control and handles input value updates and validations.\nChanges to the Field value are automatically propagated back up to the containing Form\nComponent.</p>\n<p>Fields provide a light abstraction over normal input components where values and onChange handlers\nare take care of for you. Beyond that they just render the input for their type, Fields whille pass along\nany props and children to the input so you can easily configure new input types.</p>\n<div class=\"gatsby-highlight\" data-language=\"editable\"><pre class=\"language-editable\"><code class=\"language-editable\">&lt;Form\n  noValidate\n  schema={modelSchema}\n  defaultValue={{\n    name: { first: &#39;Sally&#39;},\n    colorID: 0\n  }}\n&gt;\n  &lt;label&gt;Name&lt;/label&gt;\n  &lt;Form.Field\n    name=&#39;name.first&#39;\n    placeholder=&#39;First name&#39;\n  /&gt;\n\n  &lt;label&gt;Favorite Color&lt;/label&gt;\n  &lt;Form.Field name=&#39;colorId&#39; type=&#39;select&#39;&gt;\n    &lt;option value={0}&gt;Red&lt;/option&gt;\n    &lt;option value={1}&gt;Yellow&lt;/option&gt;\n    &lt;option value={2}&gt;Blue&lt;/option&gt;\n    &lt;option value={3}&gt;other&lt;/option&gt;\n  &lt;/Form.Field&gt;\n  &lt;Form.Submit type=&#39;submit&#39;&gt;Submit&lt;/Form.Submit&gt;\n&lt;/Form&gt;</code></pre></div>"},"childMdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `The Field Component renders a form control and handles input value updates and validations.\nChanges to the Field value are automatically propagated back up to the containing Form\nComponent.`), React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `Fields provide a light abstraction over normal input components where values and onChange handlers\nare take care of for you. Beyond that they just render the input for their type, Fields whille pass along\nany props and children to the input so you can easily configure new input types.`), React.createElement(MDXTag, {\n      name: \"pre\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"code\",\n      components: components,\n      parentName: \"pre\",\n      props: {\n        \"className\": \"language-editable\"\n      }\n    }, `<Form\n  noValidate\n  schema={modelSchema}\n  defaultValue={{\n    name: { first: 'Sally'},\n    colorID: 0\n  }}\n>\n  <label>Name</label>\n  <Form.Field\n    name='name.first'\n    placeholder='First name'\n  />\n\n  <label>Favorite Color</label>\n  <Form.Field name='colorId' type='select'>\n    <option value={0}>Red</option>\n    <option value={1}>Yellow</option>\n    <option value={2}>Blue</option>\n    <option value={3}>other</option>\n  </Form.Field>\n  <Form.Submit type='submit'>Submit</Form.Submit>\n</Form>\n`)));\n  }\n\n}"}}},"parent":{"__typename":"File","sourceInstanceName":"source"},"props":[{"name":"name","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The Field name, which should be path corresponding to a specific form <code class=\"language-text\">value</code> path.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// given the form value</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> first<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n  languages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'english'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'spanish'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// the path \"name.first\" would update the \"first\" property of the form value</span>\n<span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Field name<span class=\"token operator\">=</span><span class=\"token string\">'name.first'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// use indexes for paths that cross arrays</span>\n<span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Field name<span class=\"token operator\">=</span><span class=\"token string\">'languages[0]'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>"}},"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"as","doclets":{},"defaultValue":{"value":"'input'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>The Component Input the form should render. You can sepcify a native element such as 'textbox' or 'select'\nor provide a Component type class directly. When no type is provided the Field will attempt determine\nthe correct input from the Field's schema. A Field corresponding to a <code class=\"language-text\">yup.number()</code>\nwill render a <code class=\"language-text\">type=&#39;number&#39;</code> input by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"editable\"><pre class=\"language-editable\"><code class=\"language-editable\">&lt;Form noValidate schema={modelSchema}&gt;\n  Use the schema to determine type\n  &lt;Form.Field\n    name=&#39;dateOfBirth&#39;\n    placeholder=&#39;date&#39;\n  /&gt;\n\n  Override it!\n  &lt;Form.Field\n    name=&#39;dateOfBirth&#39;\n    type=&#39;time&#39;\n    placeholder=&#39;time only&#39;\n  /&gt;\n\n  Use a custom Component\n  (need native &#39;datetime&#39; support to see it)\n  &lt;Form.Field\n    name=&#39;dateOfBirth&#39;\n    as={MyDateInput}/&gt;\n\n&lt;/Form&gt;</code></pre></div>\n<p>Custom Inputs should comply with the basic input api contract: set a value via a <code class=\"language-text\">value</code> prop and\nbroadcast changes to that value via an <code class=\"language-text\">onChange</code> handler.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"custom","raw":"elementType"},{"name":"string"}],"raw":null}},{"name":"events","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Event name or array of event names that the Field should trigger a validation.\nYou can also specify a function that receives the Field <code class=\"language-text\">meta</code> object and returns an array of events\nin order to change validation strategies based on validity.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}},{"name":"func"}],"raw":null}},{"name":"mapFromValue","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Customize how the Field value maps to the overall Form <code class=\"language-text\">value</code>.\n<code class=\"language-text\">mapFromValue</code> can be a a string property name or a function that returns a\nvalue for <code class=\"language-text\">name</code>'d path, allowing you to set commuted values from the Field.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Field name<span class=\"token operator\">=</span><span class=\"token string\">'name'</span>\n  mapFromValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fieldValue <span class=\"token operator\">=></span> fieldValue<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> fieldValue<span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>You can also provide an object hash, mapping paths of the Form <code class=\"language-text\">value</code>\nto fields in the field value using a string field name, or a function accessor.</p>\n<div class=\"gatsby-highlight\" data-language=\"editable\"><pre class=\"language-editable\"><code class=\"language-editable\">&lt;Form\n  schema={modelSchema}\n  defaultValue={modelSchema.default()}\n&gt;\n  &lt;label&gt;Name&lt;/label&gt;\n  &lt;Form.Field\n    name=&#39;name.first&#39;\n    placeholder=&#39;First name&#39;\n  /&gt;\n\n  &lt;label&gt;Date of Birth&lt;/label&gt;\n  &lt;Form.Field name=&#39;dateOfBirth&#39;\n    mapFromValue={{\n      &#39;dateOfBirth&#39;: date =&gt; date,\n      &#39;age&#39;: date =&gt;\n        (new Date()).getFullYear() - date.getFullYear()\n  }}/&gt;\n\n  &lt;label&gt;Age&lt;/label&gt;\n  &lt;Form.Field name=&#39;age&#39;/&gt;\n\n  &lt;Form.Submit type=&#39;submit&#39;&gt;Submit&lt;/Form.Submit&gt;\n&lt;/Form&gt;</code></pre></div>"}},"required":false,"type":{"name":"union","value":[{"name":"func"},{"name":"string"},{"name":"object"}],"raw":null}},{"name":"mapToValue","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Map the Form value to the Field value. By default\nthe <code class=\"language-text\">name</code> of the Field is used to extract the relevant\nproperty from the Form value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Field\n  name<span class=\"token operator\">=</span><span class=\"token string\">'location'</span>\n  type<span class=\"token operator\">=</span><span class=\"token string\">\"dropdownlist\"</span>\n  mapToValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>model<span class=\"token operator\">=></span> <span class=\"token function\">pick</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'location'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'locationId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"errorClass","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The css class added to the Field Input when it fails validation</p>"}},"required":false,"type":{"name":"string","value":null,"raw":null}},{"name":"validates","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Tells the Field to trigger validation for specific paths.\nUseful when used in conjuction with a <code class=\"language-text\">mapFromValue</code> hash that updates more than one value, or\nif you want to trigger validation for the parent path as well.</p>\n<blockquote>\n<p>NOTE! This overrides the default behavior of validating the field itself by <code class=\"language-text\">name</code>,\ninclude the <code class=\"language-text\">name</code> if you want the field to validate itself.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Field name<span class=\"token operator\">=</span><span class=\"token string\">'name.first'</span> validates<span class=\"token operator\">=</span><span class=\"token string\">\"name.last\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Field name<span class=\"token operator\">=</span><span class=\"token string\">'name'</span> validates<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'surname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>"}},"required":false,"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}],"raw":null}},{"name":"exclusive","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Indicates whether child fields of the named field\naffect the active state ofthe field.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'names'</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'names.first'</span>\n<span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">'names.last'</span></code></pre></div>\n<p>Are all considered \"part\" of a field named <code class=\"language-text\">&#39;names&#39;</code> by default.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"noValidate","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Disables validation for the Field.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"children","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>When children is the traditional react element or nodes, they are\npassed through as-is to the Field <code class=\"language-text\">type</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Field</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>select<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">red</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">red</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Field</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>When <code class=\"language-text\">children</code> is a function, its called with the processed field\nprops and the resolved Field Input component, for more advanced use cases</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Field</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>birthDate<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> Input<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataProvider</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n     </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Input</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n   </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataProvider</span><span class=\"token punctuation\">></span></span>\n <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Field</span><span class=\"token punctuation\">></span></span></code></pre></div>"}},"required":false,"type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null}},{"name":"noMeta","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Instruct the field to not inject the <code class=\"language-text\">meta</code> prop into the input</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"fieldRef","doclets":{},"defaultValue":{"value":"null","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Attach a ref to the rendered input component</p>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"noResolveType","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"bindingProps","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"yupContext","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"any","value":null,"raw":null}},{"name":"errors","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"touched","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"actions","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"submits","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"shape","value":{"submitAttempts":{"name":"number","required":false},"submitCount":{"name":"number","required":false},"submitting":{"name":"bool","required":false}},"raw":null}}]}},"pageContext":{"displayName":"Field"}}