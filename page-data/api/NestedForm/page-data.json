{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-component-tsx","path":"/api/NestedForm","result":{"data":{"docpocalypse":{"id":"1e60fadf-276d-5d3a-a2b5-9ef87b7152c0","name":"NestedForm","importName":"import { NestedForm } from 'react-formal'","example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<NestedForm>\"), \" component is a specialized Form, that allows encapsulating\\ncomplex Fields into isolated resuable Form components of their own that can\\nbe used independent of a parent Form.\"), mdx(\"h1\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<NestedForm>\"), \" is functionally the same a normal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form>\"), \" when used by itself.\\nWhen used in the context of a larger Form, though it is responsible for managing\\nthe state of a single branch of the overall form value.\"), mdx(\"p\", null, \"The challange with resuable form fields is that one needs to provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \"\\nto each Field and names must be an \\\"absolute\\\" path to a piece of form data. This\\nmakes it hard to reparent a field component elsewhere because any nested field\\nwill continue to point to the old path. NestedForm, allows you to build Field's\\nwith relative paths instead.\"), mdx(\"p\", null, \"Consider a common case of shipping and billing addresses. The logic and UI is basically\\nthe same for each, even tho the data points to different place:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import Form, { NestedForm } from \\\"react-formal\\\";\\nimport * as yup from \\\"yup\\\";\\nimport { UsaStates } from \\\"usa-states\\\";\\n\\nconst { states } = new UsaStates();\\n\\nconst addressSchema = yup.object({\\n  address: yup.string().required(\\\"Required\\\"),\\n  city: yup.string().required(\\\"Required\\\"),\\n  state: yup.string().oneOf(states.map(s => s.abbreviation)),\\n  postalCode: yup.string().matches(/\\\\d{5}/, \\\"Must be a valid zip code\\\")\\n});\\n\\nconst schema = yup.object({\\n  title: yup.string(),\\n  shippingAddress: addressSchema,\\n  billingAddress: addressSchema\\n});\\n\\nconst AddressField = ({ name }) => (\\n  <NestedForm name={name}>\\n    <label>\\n      Address\\n      <Form.Field name=\\\"address\\\" />\\n      <Form.Message for=\\\"address\\\" className=\\\"error\\\" />\\n    </label>\\n\\n    <div className=\\\"flex\\\">\\n      <label className=\\\"flex-1\\\">\\n        City\\n        <Form.Field name=\\\"city\\\" />\\n        <Form.Message for=\\\"city\\\" className=\\\"error\\\" />\\n      </label>\\n      <label className=\\\"mx-3\\\">\\n        Postal Code\\n        <Form.Field name=\\\"postalCode\\\" />\\n        <Form.Message for=\\\"postalCode\\\" className=\\\"error\\\" />\\n      </label>\\n      <label>\\n        State\\n        <Form.Field name=\\\"state\\\" as=\\\"select\\\">\\n          {states.map(state => (\\n            <option value={state.abbreviation} key={state.abbreviation}>\\n              {state.name}\\n            </option>\\n          ))}\\n        </Form.Field>\\n        <Form.Message for=\\\"state\\\" className=\\\"error\\\" />\\n      </label>\\n    </div>\\n  </NestedForm>\\n);\\n\\n<>\\n  <Form schema={schema}>\\n    <fieldset>\\n      <legend>Shipping Address</legend>\\n      <AddressField name=\\\"shippingAddress\\\" />\\n    </fieldset>\\n    <fieldset>\\n      <legend>Billing Address</legend>\\n      <AddressField name=\\\"billingAddress\\\" />\\n    </fieldset>\\n  </Form>\\n</>;\\n\")), mdx(\"p\", null, \"Unless overridden \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<NestedForm>\"), \" will inherit configuration from its parent Form,\\nso you don't need to provide a schema, but are welcome too if convenient.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form\"), \" component that takes a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" prop. Functions exactly like a normal\\nForm, except that when a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" is present it will defer errors up to the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form>\"), \",\\nfunctioning like a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form.Field>\"), \".\"), mdx(\"p\", null, \"This is useful for encapsulating complex input groups into self-contained\\nforms without having to worry about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"very.long[1].paths[4].to.fields\\\"\"), \" for names.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A <code>Form</code> component that takes a <code>name</code> prop. Functions exactly like a normal\nForm, except that when a <code>name</code> is present it will defer errors up to the parent <code>&#x3C;Form></code>,\nfunctioning like a <code>&#x3C;Form.Field></code>.</p>\n<p>This is useful for encapsulating complex input groups into self-contained\nforms without having to worry about <code>\"very.long[1].paths[4].to.fields\"</code> for names.</p>"}},"composes":[],"props":[{"name":"name","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":true,"tsType":{"name":"string"},"type":{"name":"string","value":null,"raw":null}},{"name":"schema","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":null,"type":{"name":"object","value":null,"raw":null}},{"name":"errors","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":null,"type":{"name":"object","value":null,"raw":null}},{"name":"context","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":null,"type":{"name":"object","value":null,"raw":null}},{"name":"meta","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":null,"type":{"name":"shape","value":{"errors":{"name":"object","required":true},"onError":{"name":"func","required":true}},"raw":null}}]}},"pageContext":{"nodeId":"1e60fadf-276d-5d3a-a2b5-9ef87b7152c0","exampleId":"d3683a5d-75f9-55c8-a7b6-4006d8495292"}}}