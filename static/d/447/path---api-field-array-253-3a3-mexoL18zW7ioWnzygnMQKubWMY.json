{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `An error message renderer, Should return a `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `ReactElement`)), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"metaString\": null\n    }\n  }, `function(\n  message: string,\n  idx: number,\n  errors: array\n) -> ReactElement\n`)));\n});"}},"metadata":{"displayName":"FieldArray","doclets":{},"composes":null,"parent":{"__typename":"File","sourceInstanceName":"source"},"description":{"childMdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, `A specialized `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `Form.Field`), ` component that helps with common list manipulations.\nProvide a `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `name`), `, like normal, to the field with the array and `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `<FieldArray>`), ` will\ninject a set of special `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `arrayHelpers`), ` for handling removing, reordering,\nediting and adding new items, as well as any error handling quirks that come with those\noperations.`), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\",\n    props: {\n      \"className\": \"language-js\",\n      \"metaString\": \"{ \\\"editable\\\": true }\",\n      \"{\": true,\n      \"\\\"editable\\\":\": true,\n      \"true\": true,\n      \"}\": true\n    }\n  }, `const schema = yup.object({\n  friends: yup.array().of(\n    yup.object({\n      name: yup.string().required()\n    })\n  )\n});\n\nrender(\n <Form\n  debug\n  schema={schema}\n  defaultValue={{\n    friends: [{ name: 'Sally'}]\n  }}\n>\n  <Form.FieldArray name=\"friends\" events=\"blur\">\n   {({ value, arrayHelpers }) => (\n      <ul>\n       {value.map((value, idx) => (\n         <li key={idx} >\n           <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n             <Form.Field name={\\`friends[\\${idx}].name\\`} />\n             <button type=\"button\" onClick={() => arrayHelpers.remove(value)}>-</button>\n             <button type=\"button\" onClick={() => arrayHelpers.insert({ name: undefined }, idx)}>+</button>\n           </div>\n           <Form.Message for={\\`friends[\\${idx}].name\\`} />\n         </li>\n       ))}\n      </ul>\n    )}\n  </Form.FieldArray>\n</Form>\n)\n`)));\n});"}}},"props":[{"name":"name","doclets":{},"defaultValue":null,"description":null,"required":true,"type":{"name":"string","value":null,"raw":null}},{"name":"children","doclets":{},"defaultValue":null,"description":{"childMdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn ((_ref) => {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `<FieldArray>`), ` injects a set a altered `, React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\"\n  }, `meta`)));\n});"}}},"required":true,"type":{"name":"union","value":[{"name":"custom","raw":"elementType"},{"name":"func"}],"raw":null}}]}},"pageContext":{"displayName":"FieldArray"}}