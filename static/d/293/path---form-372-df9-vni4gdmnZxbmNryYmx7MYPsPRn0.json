{"data":{"Form":{"displayName":"Form","composes":null,"description":{"childMarkdownRemark":{"html":"<p>Form component renders a <code class=\"language-text\">value</code> to be updated and validated by child Fields.\nForms can be thought of as <code class=\"language-text\">&lt;input/&gt;</code>s for complex values, or models. A Form aggregates\na bunch of smaller inputs, each in charge of updating a small part of the overall model.\nThe Form will integrate and validate each change and fire a single unified <code class=\"language-text\">onChange</code> with the new <code class=\"language-text\">value</code>.</p>\n<p>Validation errors can be displayed anywhere inside a Form with Message Components.</p>\n<div class=\"gatsby-highlight\" data-language=\"editable\"><pre class=\"language-editable\"><code class=\"language-editable\">var defaultStr = yup.string().default(&#39;&#39;)\n\nvar customerSchema = yup\n  .object({\n    name: yup.object({\n      first: defaultStr\n        .required(&#39;please enter a first name&#39;),\n\n      last: defaultStr\n        .required(&#39;please enter a surname&#39;),\n    }),\n\n    dateOfBirth: yup.date()\n      .max(new Date(), &quot;Are you a time traveler?!&quot;),\n\n    colorId: yup.number()\n      .nullable()\n      .required(&#39;Please select a dank color&#39;)\n  });\n\nvar form = (\n  &lt;Form\n    schema={customerSchema}\n    defaultValue={customerSchema.default()}\n  &gt;\n    &lt;div&gt;\n      {\\/\\*&#39;grandchildren&#39; are no problem \\*\\/}\n      &lt;label&gt;Name&lt;/label&gt;\n\n      &lt;Form.Field\n        name=&#39;name.first&#39;\n        placeholder=&#39;First name&#39;\n      /&gt;\n      &lt;Form.Field\n        name=&#39;name.last&#39;\n        placeholder=&#39;Surname&#39;\n      /&gt;\n\n      &lt;Form.Message for={[&#39;name.first&#39;, &#39;name.last&#39;]}/&gt;\n    &lt;/div&gt;\n\n    &lt;label&gt;Date of Birth&lt;/label&gt;\n    &lt;Form.Field name=&#39;dateOfBirth&#39;/&gt;\n    &lt;Form.Message for=&#39;dateOfBirth&#39;/&gt;\n\n    &lt;label&gt;Favorite Color&lt;/label&gt;\n    &lt;Form.Field name=&#39;colorId&#39; as=&#39;select&#39;&gt;\n      &lt;option value={null}&gt;Select a color...&lt;/option&gt;\n      &lt;option value={0}&gt;Red&lt;/option&gt;\n      &lt;option value={1}&gt;Yellow&lt;/option&gt;\n      &lt;option value={2}&gt;Blue&lt;/option&gt;\n      &lt;option value={3}&gt;other&lt;/option&gt;\n    &lt;/Form.Field&gt;\n    &lt;Form.Message for=&#39;colorId&#39;/&gt;\n\n  &lt;Form.Submit type=&#39;submit&#39;&gt;\n    Submit\n  &lt;/Form.Submit&gt;\n&lt;/Form&gt;)\nReactDOM.render(form, mountNode);</code></pre></div>"}},"props":[{"name":"value","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Form value object, can be left <a href=\"/controllables\">uncontrolled</a>;\nuse the <code class=\"language-text\">defaultValue</code> prop to initialize an uncontrolled form.</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"onChange","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback that is called when the <code class=\"language-text\">value</code> prop changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n  value<span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">,</span>\n  updatedPaths<span class=\"token punctuation\">:</span> array<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"errors","doclets":{},"defaultValue":{"value":"ErrorUtils.EMPTY_ERRORS","computed":true},"description":{"childMarkdownRemark":{"html":"<p>An object hash of field errors for the form. The object should be keyed with paths\nwith the values being an array of errors or message objects. Errors can be\nleft <a href=\"/controllables\">uncontrolled</a> (use <code class=\"language-text\">defaultErrors</code> to set an initial value)\nor managed along with the <code class=\"language-text\">onError</code> callback. You can use any object shape you'd like for\nerrors, as long as you provide the Form.Message component an <code class=\"language-text\">extract</code> prop that\nunderstands how to pull out the strings message. By default it understands strings and objects\nwith a <code class=\"language-text\">&#39;message&#39;</code> property.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Form errors<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n <span class=\"token string\">\"name.first\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token string\">'First names are required'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">{</span>\n   \tmessage<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Names must be at least 2 characters long\"</span><span class=\"token punctuation\">,</span>\n   \ttype<span class=\"token punctuation\">:</span> <span class=\"token string\">'min'</span>\n   <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"onError","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback that is called when a validation error occurs. It is called with an <code class=\"language-text\">errors</code> object</p>\n<div class=\"gatsby-highlight\" data-language=\"editable\"><pre class=\"language-editable\"><code class=\"language-editable\">&lt;Form schema={modelSchema}\n  defaultValue={modelSchema.default()}\n  errors={this.state ? this.state.errors : {}}\n  onError={errors =&gt; {\n    if( errors.dateOfBirth )\n      errors.dateOfBirth = &#39;hijacked!&#39;\n    this.setState({ errors })\n  }}&gt;\n\n  &lt;Form.Field name=&#39;dateOfBirth&#39;/&gt;\n  &lt;Form.Message for=&#39;dateOfBirth&#39;/&gt;\n\n  &lt;Form.Submit type=&#39;submit&#39;&gt;Submit&lt;/Form.Submit&gt;\n&lt;/Form&gt;</code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onValidate","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback that is called whenever a validation is triggered.\nIt is called <em>before</em> the validation is actually run.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onValidate</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onBeforeSubmit","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback that is fired in response to a submit, _before validation runs.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span>formValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something with valid value</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSubmit","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback that is fired in response to a submit, after validation runs for the entire form.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span>formValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something with valid value</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onSubmitFinished","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"submitForm","doclets":{},"defaultValue":null,"description":null,"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"onInvalidSubmit","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Callback that is fired when the native onSubmit event is triggered. Only relevant when\nthe <code class=\"language-text\">component</code> prop renders a <code class=\"language-text\">&lt;form/&gt;</code> tag. onInvalidSubmit will trigger only if the form is invalid.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onInvalidSubmit</span><span class=\"token punctuation\">(</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something with errors</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"getter","doclets":{},"defaultValue":{"value":"(path, model) =>\n  path ? expr.getter(path, true)(model || {}) : model","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A value getter function. <code class=\"language-text\">getter</code> is called with <code class=\"language-text\">path</code> and <code class=\"language-text\">value</code> and\nshould return the plain <strong>javascript</strong> value at the path.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n path<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n value<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> object</code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"setter","doclets":{},"defaultValue":{"value":"BindingContext.defaultProps.setter","computed":true},"description":{"childMarkdownRemark":{"html":"<p>A value setter function. <code class=\"language-text\">setter</code> is called with <code class=\"language-text\">path</code>, the form <code class=\"language-text\">value</code> and the path <code class=\"language-text\">value</code>.\nThe <code class=\"language-text\">setter</code> must return updated form <code class=\"language-text\">value</code>, which allows you to leave the original value unmutated.</p>\n<p>The default implementation uses the <a href=\"http://facebook.github.io/react/docs/update.html\">react immutability helpers</a>,\nletting you treat the form <code class=\"language-text\">value</code> as immutable.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>\n path<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n formValue<span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">,</span>\n pathValue<span class=\"token punctuation\">:</span> any\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> object</code></pre></div>"}},"required":false,"type":{"name":"func","value":null,"raw":null}},{"name":"delay","doclets":{},"defaultValue":{"value":"300","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Time in milliseconds that validations should be debounced. Reduces the amount of validation calls\nmade at the expense of a slight delay. Helpful for performance.</p>"}},"required":false,"type":{"name":"number","value":null,"raw":null}},{"name":"strict","doclets":{},"defaultValue":{"value":"false","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Validations will be strict, making no attempt to coarce input values to the appropriate type.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"noValidate","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Turns off input validation for the Form, value updates will continue to work.</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"as","doclets":{},"defaultValue":{"value":"'form'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A tag name or Component class the Form should render.</p>\n<p>If <code class=\"language-text\">null</code> are <code class=\"language-text\">false</code> the form will simply render it's child. In\nthis instance there must only be one child.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"custom","raw":"elementType"},{"name":"enum","value":[{"value":"null","computed":false},{"value":"false","computed":false}]}],"raw":null}},{"name":"schema","doclets":{"type":"{YupSchema}"},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>A Yup schema  that validates the Form <code class=\"language-text\">value</code> prop. Used to validate the form input values\nFor more information about the yup api check out: <a href=\"https://github.com/jquense/yup/blob/master/README.md\">https://github.com/jquense/yup/blob/master/README.md</a></p>"}},"required":false,"type":{"name":"YupSchema","value":null,"raw":"function(props, name, componentName, ...args) {\n  var err =\n    !props.noValidate &&\n    PropTypes.any.isRequired(props, name, componentName, ...args)\n\n  if (props[name]) {\n    let schema = props[name]\n    if (!schema.__isYupSchema__ && !(schema.resolve && schema.validate))\n      err = new Error(\n        '`schema` must be a proper yup schema: (' + componentName + ')'\n      )\n  }\n\n  return err\n}"}},{"name":"context","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>yup schema context</p>"}},"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"debug","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>toggle debug mode, which <code class=\"language-text\">console.warn</code>s validation errors</p>"}},"required":false,"type":{"name":"bool","value":null,"raw":null}},{"name":"touched","doclets":{},"defaultValue":{"value":"{}","computed":false},"description":null,"required":false,"type":null}]}},"pageContext":{"frontmatter":{}}}