{"version":3,"sources":["webpack:///./src/pages/controllables.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,0CADR,0CAGA,mRAEqC,4BAAYC,WAAW,KAAvB,SAFrC,4CAEmI,4BAAYA,WAAW,KAAvB,YAFnI,mDAIA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iLAUL,gFAA6D,4BAAYA,WAAW,KAAvB,SAA7D,yDACe,wBAAQA,WAAW,KAAnB,cADf,uCACqG,oBAAIA,WAAW,KAAf,WADrG,mBAC4J,4BAAYA,WAAW,KAAvB,SAD5J,sFAEyE,oBAAIA,WAAW,KAAf,UAFzE,eAE2H,4BAAYA,WAAW,KAAvB,SAF3H,sBAGA,0TAE0D,wBAAQA,WAAW,KAAnB,gBAF1D,eAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oFAML,uDAAoC,4BAAYA,WAAW,KAAvB,SAApC,8BAAoH,4BAAYA,WAAW,KAAvB,gBAApH,mBAAgM,oBAAIA,WAAW,KAAf,WAAhM,wOAGG,oBAAIA,WAAW,KAAf,WAHH,eAIA,mBAAQ,CACN,GAAM,wBADR,wBAGA,uEAAoD,4BAAYA,WAAW,KAAvB,SAApD,+FAC+B,4BAAYA,WAAW,KAAvB,QAD/B,mCACmH,4BAAYA,WAAW,KAAvB,UADnH,sDAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0UAoBL,iPAKJJ,EAAWK,gBAAiB","file":"component---src-pages-controllables-mdx-ea1cc30177124a30fffc.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jquense/src/react-formal/www/node_modules/@docpocalypse/gatsby-theme/src/components/PageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"controlled-and-uncontrolled-components\"\n    }}>{`Controlled and Uncontrolled Components`}</h1>\n    <p>{`One of the strengths of React is its extensibility model, enabled by a common practice of pushing component state\nas high up the component hierarchy as appropriate. For simple components (like an input) this\nis usually a matter of tying the input `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop to a parent state property via its `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler.\nhere is an extremely common pattern:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function MyInput() {\n  const [value, setValue] = useState('');\n\n  return (\n    <input type=\"text\" value={value} onChange={e => setValue(e.target.value)} />\n  );\n}\n`}</code></pre>\n    <p>{`This pattern moves the responsibility of managing the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop from the input to its parent.\nThis is called a `}<strong parentName=\"p\">{`controlled`}</strong>{` component because the parent is in `}<em parentName=\"p\">{`control`}</em>{` of setting the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop,\nin fact, the input couldn't change its value even if it wanted to, it will `}<em parentName=\"p\">{`always`}</em>{` render the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop it is given.`}</p>\n    <p>{`Using controlled components is great for flexibility, and helps keep the data flow going in one direction,\nbut it can become tedious to wire up the components every time, even if you don't need the benefits of controlling it.\nTo mitigate this concern React introduces the concept of an `}<strong parentName=\"p\">{`uncontrolled`}</strong>{` Component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function MyInput() {\n  return <input type=\"text\" defaultValue=\"hello\" />;\n}\n`}</code></pre>\n    <p>{`This input doesn't provide a `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop, instead it uses the `}<inlineCode parentName=\"p\">{`defaultValue`}</inlineCode>{` prop to set an `}<em parentName=\"p\">{`initial`}</em>{`\nvalue for the input. After that initial setting, the input takes over and manages the value itself requiring\nno more input from the parent. This is much simpler to set up, but is not conducive to setting the input value\nfrom `}<em parentName=\"p\">{`outside`}</em>{` the input.`}</p>\n    <h3 {...{\n      \"id\": \"controlling-anything\"\n    }}>{`Controlling anything`}</h3>\n    <p>{`We can extend this pattern to more than just `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` props, lots of things can be controlled or uncontrolled.\nIn React Formal for instance the `}<inlineCode parentName=\"p\">{`Form`}</inlineCode>{` component lets you control the `}<inlineCode parentName=\"p\">{`errors`}</inlineCode>{` prop for setting\nthe current errors in the form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// controlled\n<Form\n  errors={this.state.errors}\n  onError={errors => this.setState({ errors })}\n>\n  {/* fields omitted */}\n</Form>\n\n// Uncontrolled\n<Form>\n  {/* fields omitted */}\n</Form>\n\n// and Uncontrolled with an initial setting\n<Form defaultErrors={this.state.errors}>\n  {/* fields omitted */}\n</Form>\n`}</code></pre>\n    <p>{`So when a prop is said to be \"controllable\" it means that you have the option to let the component handle it, or if you need finer grained control over how that prop updates you can jump in and handle it yourself.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}