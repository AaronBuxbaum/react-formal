{"version":3,"sources":["webpack:///./src/pages/getting-started.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,mBAAQ,CACN,GAAM,mBADR,mBAGA,4CAAyB,4BAAYC,WAAW,KAAvB,gBAAzB,QAA0F,4BAAYA,WAAW,KAAvB,OAA1F,KACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mCAIL,gCACE,mBAAGA,WAAW,cAAd,kCAA8D,4BAAYA,WAAW,KAAvB,WAA9D,eAAiI,4BAAYA,WAAW,KAAvB,OAAjI,QAAyL,4BAAYA,WAAW,KAAvB,OAAzL,8DACe,4BAAYA,WAAW,KAAvB,eADf,QAC+E,4BAAYA,WAAW,KAAvB,WAD/E,MAGF,mBAAQ,CACN,GAAM,mBADR,mBAGA,sIACwB,4BAAYA,WAAW,KAAvB,QADxB,2EAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,6SAiBL,+CAA4B,4BAAYA,WAAW,KAAvB,WAA5B,sHACqE,4BAAYA,WAAW,KAAvB,SADrE,+CAEwC,4BAAYA,WAAW,KAAvB,YAFxC,2EAIA,6DAA0C,4BAAYA,WAAW,KAAvB,SAA1C,oCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,0vBAyCL,mBAAQ,CACN,GAAM,qBADR,qBAGA,0LAC4E,4BAAYA,WAAW,KAAvB,OAD5E,yGAGgB,iCAAGA,WAAW,KAAQ,CAClC,KAAQ,kCADI,eAHhB,KAMA,8HAEA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,yWAoBL,kHACE,4BAAYA,WAAW,KAAvB,cADF,QACiE,4BAAYA,WAAW,KAAvB,SADjE,kCAEA,mBAAQ,CACN,GAAM,qBADR,qBAGA,wJAC2C,4BAAYA,WAAW,KAAvB,iBAD3C,6DAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,scAwBL,yCAAsB,4BAAYA,WAAW,KAAvB,UAAtB,4FACuB,4BAAYA,WAAW,KAAvB,YADvB,8HAGA,wMAEF,4BAAYA,WAAW,KAAvB,cAFE,0LAKA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,4wBAuCL,uFAAoE,iCAAGA,WAAW,KAAQ,CACtF,KAAQ,2BADwD,OAApE,8CAQJJ,EAAWK,gBAAiB","file":"component---src-pages-getting-started-mdx-cf14ecf7a6c03b0b344d.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jquense/src/react-formal/www/node_modules/@docpocalypse/gatsby-theme/src/components/PageLayout.tsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h2>\n    <p>{`Lets install both `}<inlineCode parentName=\"p\">{`react-formal`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`yup`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install react-formal yup\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For older browsers without the `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` as well as `}<inlineCode parentName=\"p\">{`Set`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Map`}</inlineCode>{` global object, you'll need to include\na polyfill such as `}<inlineCode parentName=\"p\">{`es6-promise`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`core-js`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"creating-a-form\"\n    }}>{`Creating a Form`}</h2>\n    <p>{`React Formal, consolidates and tracks your form's state, input values are mapped\nto a form value via their `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and works very similar to how you might serialize\na native HTML form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`import Form from '@docs/components/FormWithResult';\n\n<Form noValidate defaultValue={{ age: 25, name: 'Jane Doe' }}>\n  <label>\n    Who are you?\n    <Form.Field name=\"name\" />\n  </label>\n  <label>\n    How old are you?\n    <Form.Field name=\"age\" type=\"number\" />\n  </label>\n</Form>;\n`}</code></pre>\n    <p>{`Forms are made up of `}<inlineCode parentName=\"p\">{`<Field>`}</inlineCode>{`s, and you can use almost any component as\na field. The only expectation React Formal has it that fields accept a `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{`\nand report changes by calling an injected `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` callback. It's the same\ncontract as plain controlled inputs in React.`}</p>\n    <p>{`The example below is a single form `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` made up of an input and button.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`import Form from '@docs/components/FormWithResult';\n\nconst currentYear = new Date().getFullYear();\n\nconst AgeInput = ({ name, meta, value, ...props }) => {\n  const handleClear = () => {\n    meta.onChange(null);\n  };\n\n  return (\n    <>\n      <input\n        {...props}\n        type=\"number\"\n        value={value || ''}\n        min=\"1900\"\n        max={currentYear}\n      />\n      {value && (\n        <p>\n          born: {currentYear - value}{' '}\n          <button type=\"button\" onClick={handleClear}>\n            clear\n          </button>\n        </p>\n      )}\n    </>\n  );\n};\n\n<Form noValidate defaultValue={{ age: 64 }}>\n  <label>\n    Enter your age:\n    <Form.Field as={AgeInput} name=\"age\" />\n  </label>\n</Form>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-validation\"\n    }}>{`Adding Validation`}</h2>\n    <p>{`Most forms need some sort of value validation. Sometimes is simple, but often it\ncan get very complex. In order to handle all the cases React Formal relies on `}<inlineCode parentName=\"p\">{`yup`}</inlineCode>{`,\na small, schema-based. validation library. For more infomation about how schema\naffect forms see: `}<a parentName=\"p\" {...{\n        \"href\": \"/react-formal/api/Form#schema\"\n      }}>{`Form Schema`}</a>{`.`}</p>\n    <p>{`A schema, tells each form how and where to validate it's inputs, hit submit to\nsee the issue here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`import Form from '@docs/components/FormWithErrors';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  name: yup.string().required(),\n});\n\n<Form schema={schema}>\n  <label>\n    Enter your name:\n    <Form.Field name=\"name\" />\n  </label>\n  <Form.Message name=\"name\" className=\"error\" />\n  <Form.Submit>Submit</Form.Submit>\n</Form>;\n`}</code></pre>\n    <p>{`You can easily control how and and when fields trigger validation as well. Consult\nthe `}<inlineCode parentName=\"p\">{`FormSubmit`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Field`}</inlineCode>{` API docs for more infomation.`}</p>\n    <h2 {...{\n      \"id\": \"submitting-a-form\"\n    }}>{`Submitting a form`}</h2>\n    <p>{`Once a form is complete it's time to submit it, collect the form data and maybe\nsave it to a server. You've already seen the `}<inlineCode parentName=\"p\">{`<Form.Submit>`}</inlineCode>{` component above, which\ntriggers a form wide validation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`import Form from 'react-formal';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  name: yup.string().required(),\n});\n\nconst handleSubmit = (formData) => {\n  alert(JSON.stringify(formData, null, 2));\n};\n\n<Form schema={schema} onSubmit={handleSubmit}>\n  <label>\n    Enter your name:\n    <Form.Field name=\"name\" />\n  </label>\n  <Form.Message for=\"name\" className=\"error\" />\n  <Form.Submit>Submit</Form.Submit>\n</Form>;\n`}</code></pre>\n    <p>{`When you click `}<inlineCode parentName=\"p\">{`Submit`}</inlineCode>{` the form enters a \"submitting\" phase while it runs validation\nagain. Once it passes an `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` callback will fire. After which React Formal\nconsiders the submission finished and is ready to continue accepting input.`}</p>\n    <p>{`React Formal gives you additional hooks to control how submission works. For instance\nyou may want your Submit buttons to provide feadback while saving data to the server.\n`}<inlineCode parentName=\"p\">{`submitForm`}</inlineCode>{` allows you do do async work while the Form waits for you to finish.\nIn this example we change the button text to \"submitting…\" while we are saving\noff the form data to the server.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`import Form, { useFormSubmit } from 'react-formal';\nimport fakeSaveToServer from '../fakeSaveToServer';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  name: yup.string().required(),\n});\n\nconst submitForm = async (formData) => {\n  await fakeSaveToServer(formData);\n};\n\nconst Submit = () => {\n  const [submit, submitMeta] = useFormSubmit();\n\n  return (\n    <button type=\"submit\" onClick={submit}>\n      {submitMeta.submitting ? 'Submitting…' : 'Submit'}\n    </button>\n  );\n};\n\n<Form\n  schema={schema}\n  submitForm={submitForm}\n  defaultValue={{ name: 'Jane Doe' }}\n>\n  <label>\n    Enter your name:\n    <Form.Field name=\"name\" />\n  </label>\n  <Form.Message for=\"name\" className=\"error\" />\n  <Submit>Submit</Submit>\n</Form>;\n`}</code></pre>\n    <p>{`And that's the basics of how React Formal works. Consult the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-formal/api/Form\"\n      }}>{`API`}</a>{` documentation\nfor more tips and tricks.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}