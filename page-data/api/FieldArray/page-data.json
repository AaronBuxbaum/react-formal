{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-component-tsx","path":"/api/FieldArray","result":{"data":{"docpocalypse":{"id":"d0a4b3e6-5d02-54e6-bce4-12ab7182cfe3","name":"FieldArray","importName":"import Form from 'react-formal'","example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldArray\"), \" is a specialized \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \" that helps with list manipulations.\\nFields representing arrays have an additional layer of complexity, since array items may\\nbe reordered, added, or removed as well as updated. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldArray>\"), \" helps ensure\\nthat errors and other metadata move with the data during list manipulations.\"), mdx(\"h2\", {\n    \"id\": \"overview\"\n  }, \"Overview\"), mdx(\"p\", null, \"Provide a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" mapping to an array property of the form data and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldArray>\"), \" will\\ninject a set of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrayHelpers\"), \" for handling removing, reordering,\\nediting and adding new items, as well as any error handling quirks that come with those\\noperations.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import * as yup from \\\"yup\\\";\\nimport Form from \\\"../components/FormWithResult\\\";\\nimport IconButton from \\\"../components/IconButton\\\";\\n\\nlet cid = 0;\\nconst friend = yup.object({\\n  id: yup.number().default(() => cid++),\\n  name: yup\\n    .string()\\n    .required(\\\"Required\\\")\\n    .default(\\\"\\\")\\n});\\n\\nconst schema = yup.object({\\n  friends: yup\\n    .array()\\n    .of(friend)\\n    .min(1, \\\"Must have at least one friend\\\")\\n    .max(4, \\\"That is too many friends\\\")\\n});\\n\\n<Form\\n  debug\\n  schema={schema}\\n  defaultValue={{\\n    friends: [\\n      { id: ++cid, name: \\\"Sally\\\" },\\n      { id: ++cid, name: \\\"\\\" }\\n    ]\\n  }}\\n>\\n  <p className=\\\"font-bold text-sm\\\">\\n    Add or remove items, with and without errors to see how they are correctly\\n    moved or removed along with their field\\n  </p>\\n  <Form.Message for={`friends`} className=\\\"error\\\" />\\n  <Form.FieldArray name=\\\"friends\\\">\\n    {(values, arrayHelpers, meta) => (\\n      <>\\n        <ul>\\n          {values.map((value, idx) => (\\n            <li key={value.id}>\\n              <div className=\\\"flex items-start\\\">\\n                <Form.Field name={`friends[${idx}].name`} />\\n                <IconButton\\n                  aria-label=\\\"Remove item\\\"\\n                  onClick={() => arrayHelpers.remove(value)}\\n                >\\n                  -\\n                </IconButton>\\n                <IconButton\\n                  aria-label=\\\"Insert item\\\"\\n                  onClick={() => arrayHelpers.insert(friend.default(), idx + 1)}\\n                >\\n                  +\\n                </IconButton>\\n              </div>\\n              <Form.Message\\n                for={`friends[${idx}].name`}\\n                className=\\\"error -mt-2\\\"\\n              />\\n            </li>\\n          ))}\\n        </ul>\\n        {!values.length && (\\n          <button onClick={() => arrayHelpers.push({ id: ++cid })}>\\n            Add Friend\\n          </button>\\n        )}\\n      </>\\n    )}\\n  </Form.FieldArray>\\n</Form>;\\n\")), mdx(\"h2\", {\n    \"id\": \"array-helpers\"\n  }, \"Array helpers\"), mdx(\"p\", null, \"FieldArray injects a set of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ArrayHelpers\"), \" that contain the following methods:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"interface FieldArrayHelpers<T = any> {\\n  /** Add an item to the beginning of the array */\\n  unshift(item: T): void;\\n\\n  /** Add an item to the end of the array */\\n  push(item: T): void;\\n\\n  /** Insert an item at the provided index */\\n  insert(item: T, index: number): void;\\n\\n  /** Move an item to a new index */\\n  move(item: T, toIndex: number): void;\\n\\n  /** Remove an item from the list */\\n  remove(item: T): void;\\n\\n  /**\\n   * update or replace an item with a new one,\\n   * should generally be avoided in favor of using a inner Field\\n   * for the item to handle updates.\\n   *\\n   * Also triggers validation for the _item_\\n   */\\n  update(item: T, oldItem: T): void;\\n}\\n\")), mdx(\"p\", null, \"Each method is similar to a Field's onChange handler, updating and validating\\nthe array field.\"), mdx(\"h2\", {\n    \"id\": \"validation\"\n  }, \"Validation\"), mdx(\"p\", null, \"Validation works a bit differently for FieldArrays as compared to normal Fields. Normally\\nwhen a field value changes validation is triggered for that path \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"as well as any nested paths:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"import { object, string, array } from \\\"yup\\\";\\n\\nconst schema = object({\\n  friends: array()\\n    .of(\\n      object({\\n        name: string().required(\\\"Required\\\")\\n      })\\n    )\\n    .min(1, \\\"You need at least one friend\\\")\\n});\\n\")), mdx(\"p\", null, \"As a normal Field triggering validation for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"friends\"), \" might result in two\\nerrors: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"Required\\\"\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"You need at least one friend\\\"\"), \". This makes sense friends\\nfor object fields, but is a bit confusing when adding a new friend would immediately\\nvalidate it, even though the user hasn't had a chance to input anything.\"), mdx(\"p\", null, \"To address this, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FieldArray\"), \" changes, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only report errors for its \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"name\")), \" . Meaning\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrayHelpers.add()\"), \" will check if the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" for fiends is correct, but not if the newly added\\nitem is valid.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" validation via the schema is still run for the entire \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"friends\"), \" branch,\\nbut child errors are discarded and not added to form errors. This is only relevant\\nif each field performs some expensive validation.\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldArray>\"), \", unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \", does not render any component, and\\nis essentially a render prop version of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/api/useFieldArray\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"useFieldArray\")), \", accepting all\\nthe same options.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p><code>&#x3C;FieldArray></code>, unlike <code>&#x3C;Field></code>, does not render any component, and\nis essentially a render prop version of <a href=\"/api/useFieldArray\"><code>useFieldArray</code></a>, accepting all\nthe same options.</p>"}},"composes":[],"props":[{"name":"name","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":true,"tsType":{"name":"string"},"type":{"name":"string","value":null,"raw":null}},{"name":"children","tags":[{"name":"type","value":"{(value: T, arrayHelpers: FieldArrayHelpers, meta; FieldMeta) => ReactNode}"}],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The similar signature as providing a function to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Field>\"), \" but with an\\nadditional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arrayHelpers\"), \" object passed to the render function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"<Form.FieldArray>\\n  {(values, arrayHelpers, meta) => ... }\\n</Form.FieldArray>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>The similar signature as providing a function to <code>&#x3C;Field></code> but with an\nadditional <code>arrayHelpers</code> object passed to the render function:</p>\n<pre><code class=\"language-tsx\" data-meta=\"static\">&#x3C;Form.FieldArray>\n  {(values, arrayHelpers, meta) => ... }\n&#x3C;/Form.FieldArray>\n</code></pre>"}},"required":true,"tsType":{"name":"signature","type":"function","raw":"(\n  value: T[],\n  helpers: FieldArrayHelpers<T>,\n  meta: FieldArrayMeta,\n) => React.ReactNode","signature":{"arguments":[{"name":"value","type":{"name":"Array","elements":[{"name":"T"}],"raw":"T[]"}},{"name":"helpers","type":{"name":"FieldArrayHelpers","elements":[{"name":"T"}],"raw":"FieldArrayHelpers<T>"}},{"name":"meta","type":{"name":"FieldArrayMeta"}}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"type":{"name":"union","value":[{"name":["value: T, arrayHelpers: FieldArrayHelpers, meta; FieldMeta) => ReactNod"]}],"raw":null}},{"name":"type","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"required":false,"tsType":{"name":"string"},"type":{"name":"string","value":null,"raw":null}},{"name":"exclusive","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Indicates whether child paths of the current FieldArray\\naffect the active state of the FieldArray. Does not\\naffect which paths are validated, only whether \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meta.valid\"), \"\\nconsiders child paths for its state.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Indicates whether child paths of the current FieldArray\naffect the active state of the FieldArray. Does not\naffect which paths are validated, only whether <code>meta.valid</code>\nconsiders child paths for its state.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"boolean","value":null,"raw":null}},{"name":"noValidate","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Disables validation for the FieldArray.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Disables validation for the FieldArray.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"boolean","value":null,"raw":null}},{"name":"mapToValue","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Map the Form value to the Field value. By default\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" of the Field is used to extract the relevant\\nproperty from the Form value.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"<Form.Field\\n  name='location'\\n  type=\\\"dropdownlist\\\"\\n  mapToValue={formData=> pick(formData, 'location', 'locationId')}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Map the Form value to the Field value. By default\nthe <code>name</code> of the Field is used to extract the relevant\nproperty from the Form value.</p>\n<pre><code class=\"language-jsx\" data-meta=\"static\">&#x3C;Form.Field\n  name='location'\n  type=\"dropdownlist\"\n  mapToValue={formData=> pick(formData, 'location', 'locationId')}\n/>\n</code></pre>"}},"required":false,"tsType":{"name":"MapToValue"},"type":{"name":"MapToValue","value":null,"raw":null}}]}},"pageContext":{"nodeId":"d0a4b3e6-5d02-54e6-bce4-12ab7182cfe3","exampleId":"dbe78931-f644-537e-9a93-762c20a37fc3"}}}