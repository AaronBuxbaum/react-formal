{"data":{"mdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A specialized `, React.createElement(MDXTag, {\n      name: \"inlineCode\",\n      components: components,\n      parentName: \"p\"\n    }, `Form.Field`), ` component that handles array fields.\nSpecifically it handles errors correctly when items are added, removed, or\nreordered.`));\n  }\n\n}"}},"metadata":{"displayName":"FormSubmit","doclets":{},"composes":null,"description":{"childMarkdownRemark":{"html":"<p>A Form submit button, for triggering validations for the entire form or specific fields.</p>"},"childMdx":{"code":{"body":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nreturn class MDXContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.layout = null;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      components\n    } = _this$props,\n          props = _objectWithoutProperties(_this$props, [\"components\"]);\n\n    return React.createElement(MDXTag, {\n      name: \"wrapper\",\n      components: components\n    }, React.createElement(MDXTag, {\n      name: \"p\",\n      components: components\n    }, `A Form submit button, for triggering validations for the entire form or specific fields.`));\n  }\n\n}"}}},"parent":{"__typename":"File","sourceInstanceName":"source"},"props":[{"name":"type","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>The <code class=\"language-text\">&lt;button/&gt;</code> type</p>"}},"required":false,"type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'submit'","computed":false}],"raw":null}},{"name":"triggers","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>Specify particular fields to validate in the related form. If empty the entire form will be validated.</p>"}},"required":false,"type":{"name":"arrayOf","value":{"name":"string"},"raw":null}},{"name":"children","doclets":{},"defaultValue":null,"description":{"childMarkdownRemark":{"html":"<p>When a function, <code class=\"language-text\">children</code> is called with the Form submitting state</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Form<span class=\"token punctuation\">.</span>Submit<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>submitting <span class=\"token operator\">=></span> submitting <span class=\"token operator\">?</span> <span class=\"token string\">'Savingâ€¦'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'Submit'</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token punctuation\">.</span>Submit<span class=\"token operator\">></span></code></pre></div>"}},"required":false,"type":{"name":"union","value":[{"name":"node"},{"name":"func"}],"raw":null}},{"name":"as","doclets":{},"defaultValue":{"value":"'button'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>Control the rendering of the Form Submit component.</p>"}},"required":false,"type":{"name":"custom","value":null,"raw":"elementType"}},{"name":"events","doclets":{"default":"'onClick'"},"defaultValue":{"value":"'onClick'","computed":false},"description":{"childMarkdownRemark":{"html":"<p>A string or array of event names that trigger validation.</p>"}},"required":false,"type":{"name":"union","value":[{"name":"string"},{"name":"arrayOf","value":{"name":"string"}}],"raw":null}},{"name":"errors","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"actions","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"object","value":null,"raw":null}},{"name":"submits","doclets":{"private":true},"defaultValue":null,"description":null,"required":false,"type":{"name":"object","value":null,"raw":null}}]}},"pageContext":{"displayName":"FormSubmit"}}