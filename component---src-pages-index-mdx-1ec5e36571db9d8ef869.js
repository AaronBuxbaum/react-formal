(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{604:function(e,a,n){"use strict";n.r(a);var t=n(76),o=n.n(t),r=n(1),l=n.n(r),m=n(285),i=n(115);function s(e){return l.a.createElement("img",{src:"./bow-tie.svg",style:{width:75,marginTop:-5}})}s.propTypes={};var c=s,p=n(57),u=n.n(p)()(i.Link,{allowAs:!0},"HeroLink",n(621),"hero-link","heroLink");function d(e){return l.a.createElement("div",null,l.a.createElement("main",null,l.a.createElement("div",{className:"jumbotron jumbotron-fluid text-white",style:{backgroundColor:"#2f2f2f"}},l.a.createElement("div",{className:"container"},l.a.createElement("h1",null,"React ",l.a.createElement(c,null)," Formal"),l.a.createElement("p",null,"Classy HTML form management"),l.a.createElement("div",null,l.a.createElement(u,{to:"/api/Form",className:"pr-2"},"Documentation"),l.a.createElement(u,{as:"a",href:"https://github.com/jquense/react-formal"},"Github")))),l.a.createElement("div",{className:"container text-center headlines d-flex"},l.a.createElement("div",{className:"px-4",style:{maxWidth:"33%"}},l.a.createElement("h2",null,"Strongly Typed"),l.a.createElement("p",null,"Schema based forms to handle all the frustrating parsing and serializing of strings to objects automatically.")),l.a.createElement("div",{className:"px-4",style:{maxWidth:"33%"}},l.a.createElement("h2",null,"Minimal Wiring"),l.a.createElement("p",null,"Requires about as much boilerplate as a single input. No managing tons of values and onChange handlers.")),l.a.createElement("div",{className:"px-4",style:{maxWidth:"33%"}},l.a.createElement("h2",null,"Extreme Flexibility"),l.a.createElement("p",null,"You have complete control how each field renders. Use any components you want!"))),l.a.createElement("div",{className:"container"},e.children)))}d.propTypes={};var h=d,g=n(291),f=n(623),b=n.n(f);n.d(a,"_frontmatter",function(){return E});a.default=function(e){var a=e.components,n=o()(e,["components"]);return l.a.createElement(m.MDXTag,{name:"wrapper",Layout:h,layoutProps:n,components:a},l.a.createElement(m.MDXTag,{name:"p",components:a},'React Formal is a library for quickly and painlessly handling HTML form\nvalidation and serialization. It tries to strike a balance between\nprescriptive form generators and libraries that require you to manually\nhandle ever input and manage them in state. React Formal, lets you build your\nform however you want with no restrictions on form markup, or unnecessary boilerplate.\nReact Formal leverages a schema validation system, which offers helpful benefits\nover the traditional "validate the state DOM" approach.'),l.a.createElement(m.MDXTag,{name:"ul",components:a},l.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},'Forms can be handled the "React Way", with controlled or uncontrolled values,\ncompletely decoupled from DOM state.'),l.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"Working against javascript objects instead of HTML representations of an objects,\nmeans no need for ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"li"},"<input type='hidden'/>"),"; only render inputs that a user actually needs to change!"),l.a.createElement(m.MDXTag,{name:"li",components:a,parentName:"ul"},"Schema based validation, lets you reuse your parsing and model validation logic")),l.a.createElement(m.MDXTag,{name:"h3",components:a,props:{id:"getting-started"}},l.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"h3",props:{href:"#getting-started","aria-hidden":!0,class:"anchor"}}),"Getting Started"),l.a.createElement(m.MDXTag,{name:"p",components:a},"Lets install both ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react-formal")," and ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"yup"),"."),l.a.createElement(m.MDXTag,{name:"pre",components:a},l.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-sh",metaString:""}},"npm install react-formal yup\n")),l.a.createElement(m.MDXTag,{name:"blockquote",components:a},l.a.createElement(m.MDXTag,{name:"p",components:a,parentName:"blockquote"},"For older browsers without the ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Promise")," as well as ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Set")," and ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"Map")," global object, you'll need to include\na polyfill such as ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"es6-promise"),", or ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"core-js"),".")),l.a.createElement(m.MDXTag,{name:"p",components:a},"If you'd like more robust inputs such as, date and number pickers, multiselect,\nand comboboxes (like in the documentation) you might want to also install ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"react-formal-inputs")," which\nis swaps out the native input types for ",l.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"http://jquense.github.io/react-widgets/"}},"react-widgets")," (read the docs for complete installation instructions)."),l.a.createElement(m.MDXTag,{name:"pre",components:a},l.a.createElement(m.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-sh",metaString:""}},"npm install react-formal-inputs\n")),l.a.createElement(m.MDXTag,{name:"p",components:a},"Lets first define the object schema that our form will provide input too.\nreact-formal uses ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"yup"),", a small schema library for writing expresive validations, as it's main validation engine.\nCheck out the ",l.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://runkit.com/jquense/yup#"}},"quick start guide to ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"yup"))," for schema basics,\nas well as ",l.a.createElement(m.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"https://github.com/jquense/yup/blob/master/README.md"}},"yup documentation site")," for\na full run down of the features."),l.a.createElement(g.default,{code:b.a}))};var E={}},621:function(e,a,n){e.exports={heroLink:"SplashPageLayout-HeroLink-module--hero-link--1wRFq"}},623:function(e,a){e.exports='const Form = require(\'react-formal\')\nconst { object, string, number, date } = require(\'yup\')\n\nconst modelSchema = object({\n  name: object({\n    first: string().required(\'please enter a first name\'),\n    last: string().required(\'please enter a surname\'),\n  }),\n\n  dateOfBirth: date().max(new Date(), "You can\'t be born in the future!"),\n\n  colorId: number()\n    .nullable()\n    .required(\'Please select a color\'),\n})\n\nrender(\n  <Form schema={modelSchema} defaultValue={modelSchema.default()}>\n    <div>\n      <label>Name</label>\n\n      <Form.Field name="name.first" placeholder="First name" />\n      <Form.Field name="name.last" placeholder="Surname" />\n\n      <Form.Message\n        for={[\'name.first\', \'name.last\']}\n        className="validation-error"\n      />\n    </div>\n\n    <label>Date of Birth</label>\n    <Form.Field name="dateOfBirth" />\n    <Form.Message for="dateOfBirth" className="validation-error" />\n\n    <label>Favorite Color</label>\n    <Form.Field name="colorId" as="select">\n      <option value={null}>Select a color...</option>\n      <option value={0}>Red</option>\n      <option value={1}>Yellow</option>\n      <option value={2}>Blue</option>\n      <option value={3}>other</option>\n    </Form.Field>\n    <Form.Message for="colorId" className="validation-error" />\n\n    <Form.Submit type="submit">Submit</Form.Submit>\n  </Form>\n)\n'}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LS0tc3JjLXBhZ2VzLWluZGV4LW1keC0xZWM1ZTM2NTcxZGI5ZDhlZjg2OS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvZ28uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7fVxuXG5mdW5jdGlvbiBMb2dvKHByb3BzKSB7XG4gIHJldHVybiA8aW1nIHNyYz1cIi4vYm93LXRpZS5zdmdcIiBzdHlsZT17eyB3aWR0aDogNzUsIG1hcmdpblRvcDogLTUgfX0gLz5cbn1cblxuTG9nby5wcm9wVHlwZXMgPSBwcm9wVHlwZXNcblxuZXhwb3J0IGRlZmF1bHQgTG9nb1xuIl0sIm1hcHBpbmdzIjoiQUFJQSIsInNvdXJjZVJvb3QiOiIifQ==