(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{iQ0A:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return m})),t.d(n,"default",(function(){return l}));t("rGqo"),t("yt8O"),t("Btvt"),t("RW0V"),t("91GP"),t("q1tI");var a=t("7ljp"),o=t("eXqk");var m={},r={_frontmatter:m},i=o.default;function l(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,o={},m=Object.keys(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(a.mdx)(i,Object.assign({},r,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(a.mdx)("p",null,"Lets install both ",Object(a.mdx)("inlineCode",{parentName:"p"},"react-formal")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"yup"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-sh"}),"npm install react-formal yup\n")),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"For older browsers without the ",Object(a.mdx)("inlineCode",{parentName:"p"},"Promise")," as well as ",Object(a.mdx)("inlineCode",{parentName:"p"},"Set")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"Map")," global object, you'll need to include\na polyfill such as ",Object(a.mdx)("inlineCode",{parentName:"p"},"es6-promise"),", or ",Object(a.mdx)("inlineCode",{parentName:"p"},"core-js"),".")),Object(a.mdx)("h2",{id:"creating-a-form"},"Creating a Form"),Object(a.mdx)("p",null,"React Formal consolidates and tracks form state. Input values are mapped\nto an overall form value via their ",Object(a.mdx)("inlineCode",{parentName:"p"},"name"),". It works very similar to how you might serialize\na native HTML form."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'import Form from \'@docs/components/FormWithResult\';\n\n<Form noValidate defaultValue={{ age: 25, name: \'Jane Doe\' }}>\n  <label>\n    Who are you?\n    <Form.Field name="name" />\n  </label>\n  <label>\n    How old are you?\n    <Form.Field name="age" type="number" />\n  </label>\n</Form>;\n')),Object(a.mdx)("p",null,"Forms are made up of ",Object(a.mdx)("inlineCode",{parentName:"p"},"<Field>"),"s, and you can use almost any component as\na field. The only expectation React Formal has it that the field component accept a ",Object(a.mdx)("inlineCode",{parentName:"p"},"value"),"\nand report changes by calling an injected ",Object(a.mdx)("inlineCode",{parentName:"p"},"onChange")," callback. It's the same\ncontract as plain controlled inputs in React."),Object(a.mdx)("p",null,"The example below is a single form ",Object(a.mdx)("inlineCode",{parentName:"p"},"Field")," made up of an input and button."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'import Form from \'@docs/components/FormWithResult\';\n\nconst currentYear = new Date().getFullYear();\n\nconst AgeInput = ({ name, meta, value, ...props }) => {\n  const handleClear = () => {\n    meta.onChange(null);\n  };\n\n  return (\n    <>\n      <input\n        {...props}\n        type="number"\n        value={value || \'\'}\n        min="1900"\n        max={currentYear}\n      />\n      {value && (\n        <p>\n          born: {currentYear - value}{\' \'}\n          <button type="button" onClick={handleClear}>\n            clear\n          </button>\n        </p>\n      )}\n    </>\n  );\n};\n\n<Form noValidate defaultValue={{ age: 64 }}>\n  <label>\n    Enter your age:\n    <Form.Field as={AgeInput} name="age" />\n  </label>\n</Form>;\n')),Object(a.mdx)("p",null,"Passing React Formal ",Object(a.mdx)("inlineCode",{parentName:"p"},"onChange")," handlers to native inputs will Just Work. The target\n",Object(a.mdx)("inlineCode",{parentName:"p"},"value")," is pulled from the event correctly and passed up. However, you ",Object(a.mdx)("strong",{parentName:"p"},"do not")," need to pass\nan event, and can instead pass the input ",Object(a.mdx)("inlineCode",{parentName:"p"},"value")," by itself."),Object(a.mdx)("h2",{id:"adding-validation"},"Adding Validation"),Object(a.mdx)("p",null,"Most forms need some sort of value validation. Sometimes is simple, but often it\ncan get very complex. In order to handle all the cases React Formal relies on ",Object(a.mdx)("inlineCode",{parentName:"p"},"yup"),",\na small, schema-based. validation library. For more infomation about how schema\naffect forms see: ",Object(a.mdx)("a",Object.assign({parentName:"p"},{href:"/react-formal/api/Form#schema"}),"Form Schema"),"."),Object(a.mdx)("p",null,"A schema, tells each form how and where to validate it's inputs, hit submit to\nsee the issue here:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'import Form from \'@docs/components/FormWithErrors\';\nimport * as yup from \'yup\';\n\nconst schema = yup.object({\n  name: yup.string().required(),\n});\n\n<Form schema={schema}>\n  <label>\n    Enter your name:\n    <Form.Field name="name" />\n  </label>\n  <Form.Message name="name" className="error" />\n  <Form.Submit>Submit</Form.Submit>\n</Form>;\n')),Object(a.mdx)("p",null,"You can easily control how and and when fields trigger validation as well. Consult\nthe ",Object(a.mdx)("inlineCode",{parentName:"p"},"FormSubmit")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"Field")," API docs for more infomation."),Object(a.mdx)("h2",{id:"submitting-a-form"},"Submitting a form"),Object(a.mdx)("p",null,"Once a form is complete it's time to submit it, collect the form data and maybe\nsave it to a server. You've already seen the ",Object(a.mdx)("inlineCode",{parentName:"p"},"<Form.Submit>")," component above, which\ntriggers a form wide validation."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'import Form from \'react-formal\';\nimport * as yup from \'yup\';\n\nconst schema = yup.object({\n  name: yup.string().required(),\n});\n\nconst handleSubmit = (formData) => {\n  alert(JSON.stringify(formData, null, 2));\n};\n\n<Form schema={schema} onSubmit={handleSubmit}>\n  <label>\n    Enter your name:\n    <Form.Field name="name" />\n  </label>\n  <Form.Message for="name" className="error" />\n  <Form.Submit>Submit</Form.Submit>\n</Form>;\n')),Object(a.mdx)("p",null,"When you click ",Object(a.mdx)("inlineCode",{parentName:"p"},"Submit"),' the form enters a "submitting" phase while it runs validation\nagain. If validation succeeds an ',Object(a.mdx)("inlineCode",{parentName:"p"},"onSubmit")," callback will fire. After which React Formal\nconsiders the submission finished and is ready to continue processing input."),Object(a.mdx)("p",null,"React Formal gives you additional hooks to control how submission works. For instance\nyou may want your Submit buttons to provide feadback while saving data to the server.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"submitForm"),' allows you do do async work while the Form waits for you to finish.\nIn this example we change the button text to "submitting…" while saving\nthe form data to a server.'),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),"import Form, { useFormSubmit } from 'react-formal';\nimport fakeSaveToServer from '../fakeSaveToServer';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  name: yup.string().required(),\n});\n\nconst submitForm = async (formData) => {\n  await fakeSaveToServer(formData);\n};\n\nconst Submit = () => {\n  const [submit, submitMeta] = useFormSubmit();\n\n  return (\n    <button type=\"submit\" onClick={submit}>\n      {submitMeta.submitting\n        ? 'Submitting…'\n        : `Submit ${submitMeta.submitCount ? '✓' : ''}`}\n    </button>\n  );\n};\n\n<Form\n  schema={schema}\n  submitForm={submitForm}\n  defaultValue={{ name: 'Jane Doe' }}\n>\n  <label>\n    Enter your name:\n    <Form.Field name=\"name\" />\n  </label>\n  <Form.Message for=\"name\" className=\"error\" />\n  <Submit>Submit</Submit>\n</Form>;\n")),Object(a.mdx)("p",null,"And that's the basics of how React Formal works. Consult the ",Object(a.mdx)("a",Object.assign({parentName:"p"},{href:"/react-formal/api/Form"}),"API")," documentation\nfor more tips and tricks."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-getting-started-mdx-542cd1ff6fb37e44134d.js.map